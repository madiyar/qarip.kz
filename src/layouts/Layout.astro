--- 
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

interface Props {
	title: string;
	description?: string;
}

const { title, description } = Astro.props;

---

<!DOCTYPE html>
<html lang="kk-KZ">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description || "Astro description"}>
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link href="https://fonts.googleapis.com/css2?family=Geologica:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
    <slot name="head" />
	</head>
	<body class="flex flex-col min-h-screen">
		<Header />
		<main class="md:container md:mx-auto px-8 py-6 max-w-7xl flex-1">
			<slot />
		</main>
		<Footer />
	</body>
</html>
<script>
  const closeBtn = document.querySelector('[data-close-button]');
  const openBtn = document.querySelector('[data-open-button]');
  const menu = document.querySelector('[data-menu-mobile]');

  if (closeBtn && openBtn && menu) {
    openBtn.addEventListener('click', () => {
      menu.setAttribute("style", "display: flex");
      document.body.setAttribute("style", "overflow: hidden");
    });

    closeBtn.addEventListener('click', () => {
      menu.setAttribute("style", "display: none");
      document.body.setAttribute("style", "");
    });
  }
</script>
<script is:inline>
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
      return 'light';
  })();

  if (theme === 'light') {
    document.documentElement.classList.remove('dark');
  } else {
    document.documentElement.classList.add('dark');
  }

  window.localStorage.setItem('theme', theme);

  const handleToggleClick = () => {
    const element = document.documentElement;
    element.classList.toggle("dark");

    const isDark = element.classList.contains("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
  }
  const toggleBtn = document.querySelector('[data-toggle-theme-button]');

  if (toggleBtn) {
    toggleBtn.addEventListener("click", handleToggleClick);
  }
</script>
<style is:global>
@tailwind base;
@tailwind components;
@layer base {
  * {
    box-sizing: border-box;
  }

  html,
  body {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    @apply bg-white dark:bg-zinc-900;
  }
  /* width */
  ::-webkit-scrollbar {
    @apply w-1 h-1 bg-inherit;
  }

  /* Track */
  ::-webkit-scrollbar-track {
    @apply bg-transparent rounded-full;
  }

  /* Handle */
  ::-webkit-scrollbar-thumb {
    @apply rounded-full border-none bg-zinc-600;
  }

  /* Handle on hover */
  ::-webkit-scrollbar-thumb:hover {
    @apply bg-zinc-500;
  }
}
@layer components {
  .page-title {
    @apply text-4xl font-semibold break-words;
    @apply sm:text-5xl dark:text-white;
  }

  .search-input {
    @apply w-full bg-zinc-900/10 dark:bg-zinc-600/20 px-4 py-3 rounded-xl;
  }
}
</style>